import gradio as gr
import tensorflow as tf
import numpy as np
import pandas as pd
from datasets import load_dataset

model = tf.keras.models.load_model('model/price_model.h5')
location_mapping = {1: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', 2: '–í–æ–ª–≥–æ–≥—Ä–∞–¥', 3: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', 4: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 5: '–ú–∞–π–∫–æ–ø', 6: '–≠–ª–∏—Å—Ç–∞'}
district_mapping = {
    1: [11, 12, 13, 14, 15],
    2: [21, 22, 23, 24, 25, 26, 27, 28],
    3: [31, 32, 33, 34],
    4: [41, 42, 43, 44, 45, 46, 47, 48],
    5: [51],
    6: [61]
}
district_names = {
    11: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å - –ö–∏—Ä–æ–≤—Å–∫–∏–π', 12: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å - –õ–µ–Ω–∏–Ω—Å–∫–∏–π', 13: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å - –°–æ–≤–µ—Ç—Å–∫–∏–π', 14: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å - –¢—Ä—É—Å–æ–≤—Å–∫–∏–π', 15: '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    21: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', 22: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π', 23: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –ö–∏—Ä–æ–≤—Å–∫–∏–π', 24: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π', 25: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π', 26: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –°–æ–≤–µ—Ç—Å–∫–∏–π', 27: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π', 28: '–í–æ–ª–≥–æ–≥—Ä–∞–¥ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    31: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä - –ó–∞–ø–∞–¥–Ω—ã–π', 32: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä - –ö–∞—Ä–∞—Å—É–Ω—Å–∫–∏–π', 33: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä - –ü—Ä–∏–∫—É–±–∞–Ω—Å–∫–∏–π', 34: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    41: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π', 42: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π', 43: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –ö–∏—Ä–æ–≤—Å–∫–∏–π', 44: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –õ–µ–Ω–∏–Ω—Å–∫–∏–π', 45: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', 46: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π', 47: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π', 48: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É - –°–æ–≤–µ—Ç—Å–∫–∏–π',
    51: '–ú–∞–π–∫–æ–ø - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π',
    61: '–≠–ª–∏—Å—Ç–∞ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π'
}
author_type_mapping = {0: '–†–∏–µ–ª—Ç–æ—Ä', 1: '–ß–∞—Å—Ç–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü'}
dataset = load_dataset("1sozidatel1/sfd_housing_prices_november_2024")
data = pd.DataFrame(dataset['train'])
feature_cols = ['author_type_id', 'location_id', 'district_id', 'floor', 'rooms_count', 'total_meters']

X = data[feature_cols]
X_min = X.min()
X_max = X.max()
y = data['price'].values.reshape(-1, 1)
y_min = np.min(y)
y_max = np.max(y)

def predict_price(author_type, location, district, floor, rooms_count, total_meters):
    author_type_id = list(author_type_mapping.keys())[list(author_type_mapping.values()).index(author_type)]
    location_id = list(location_mapping.keys())[list(location_mapping.values()).index(location)]
    district_id = list(district_names.keys())[list(district_names.values()).index(district)]
    input_data = np.array([[author_type_id, location_id, district_id, floor, rooms_count, total_meters]])
    input_data_normalized = (input_data - X_min.values) / (X_max.values - X_min.values)
    prediction = model.predict(input_data_normalized)
    prediction_unscaled = prediction * (y_max - y_min) + y_min
    return np.round(prediction_unscaled.flatten()[0], 1)

def update_districts(location):
    location_id = list(location_mapping.keys())[list(location_mapping.values()).index(location)]
    districts = [district_names[district_id] for district_id in district_mapping[location_id]]
    return gr.update(choices=districts)

with gr.Blocks() as demo:
    gr.Markdown("# –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
    gr.Markdown("–≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞, –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —ç—Ç–∞–∂, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –ø–ª–æ—â–∞–¥—å. –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üíµ")
    with gr.Row():
        with gr.Column():
            author_type = gr.Dropdown(choices=list(author_type_mapping.values()), label="–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞")
            location = gr.Dropdown(choices=list(location_mapping.values()), label="–ì–æ—Ä–æ–¥")
            district = gr.Dropdown(label="–†–∞–π–æ–Ω")
            floor = gr.Number(label="–≠—Ç–∞–∂", minimum=1, maximum=50)
            rooms_count = gr.Dropdown(choices=[1, 2, 3, 4, 5], label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç")
            total_meters = gr.Number(label="–ü–ª–æ—â–∞–¥—å, –∫–≤.–º")
            predict_btn = gr.Button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É")
        with gr.Column():
            price = gr.Number(label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, (—Ç—ã—Å. —Ä—É–±.)")

    location.change(update_districts, inputs=location, outputs=district)
    predict_btn.click(predict_price, inputs=[author_type, location, district, floor, rooms_count, total_meters], outputs=price)

demo.launch()
